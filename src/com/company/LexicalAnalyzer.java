// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexicalAnalyzer.flex

package com.company;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexicalAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\2\0\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\11\24\1\0"+
    "\1\25\1\26\1\27\1\30\2\0\1\31\3\32\1\33"+
    "\1\32\21\34\1\35\2\34\1\36\1\37\1\40\1\41"+
    "\1\42\1\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\34\1\54\1\55\1\34\1\56"+
    "\1\57\1\60\1\34\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\35\1\67\1\34\1\70\1\71\1\72\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\21\1\22\1\23\1\24\1\25\2\26\1\27"+
    "\1\30\1\31\15\26\1\32\1\33\1\34\1\35\1\36"+
    "\1\35\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\0\1\46\1\47\2\0\1\50\1\51\1\52\7\26"+
    "\1\53\1\26\1\54\14\26\1\55\1\56\4\0\1\47"+
    "\1\21\7\26\1\57\1\26\1\60\1\61\1\62\1\26"+
    "\1\63\4\26\1\64\5\26\1\0\2\65\2\26\1\66"+
    "\3\26\1\67\2\26\1\70\1\71\1\26\1\72\3\26"+
    "\1\73\1\74\1\26\1\0\1\26\1\75\1\76\1\77"+
    "\3\26\1\100\3\26\1\101\2\26\1\102\1\26\1\103"+
    "\1\104\1\105\4\26\1\106\2\26\1\107\26\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\166\0\166\0\261\0\166\0\354"+
    "\0\166\0\166\0\u0127\0\166\0\166\0\u0162\0\u019d\0\166"+
    "\0\u01d8\0\166\0\u0213\0\u024e\0\u0289\0\166\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\166\0\166\0\166\0\u03eb\0\u0426"+
    "\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe"+
    "\0\u0639\0\u0674\0\u06af\0\166\0\u06ea\0\166\0\166\0\166"+
    "\0\u0725\0\166\0\166\0\166\0\166\0\166\0\166\0\166"+
    "\0\u0760\0\u079b\0\166\0\u07d6\0\u0811\0\u084c\0\166\0\166"+
    "\0\166\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0887\0\u0a24\0\u0887\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\166"+
    "\0\166\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0dd4\0\u084c\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0e0f\0\u0fac"+
    "\0\u0e0f\0\u0e0f\0\u0e0f\0\u0fe7\0\u0e0f\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u0e0f\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235"+
    "\0\166\0\u1270\0\u12ab\0\u12e6\0\u12ab\0\u1321\0\u135c\0\u1397"+
    "\0\u12ab\0\u13d2\0\u140d\0\u12ab\0\u12ab\0\u1448\0\u12ab\0\u1483"+
    "\0\u14be\0\u14f9\0\u12ab\0\u12ab\0\u1534\0\u156f\0\u15aa\0\u15aa"+
    "\0\u15aa\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u15aa\0\u1696\0\u16d1"+
    "\0\u170c\0\u15aa\0\u1747\0\u1782\0\u1747\0\u17bd\0\u1747\0\u1747"+
    "\0\u1747\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18a9\0\u18e4\0\u191f"+
    "\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\3\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\4\33\1\34\1\3\1\35\1\36\1\3"+
    "\1\33\1\37\1\40\1\33\1\41\1\42\2\33\1\43"+
    "\1\33\1\44\1\45\1\33\1\46\1\47\1\50\1\51"+
    "\1\33\1\52\1\53\1\33\1\54\1\55\1\56\2\57"+
    "\3\0\2\57\1\60\27\57\1\61\33\57\75\0\1\5"+
    "\117\0\1\62\54\0\1\63\110\0\1\64\61\0\1\65"+
    "\10\0\1\66\63\0\1\67\6\0\1\70\60\0\1\71"+
    "\4\0\1\72\4\0\1\73\64\0\1\74\1\0\2\25"+
    "\6\0\1\75\1\0\1\76\11\0\1\75\44\0\1\74"+
    "\1\0\2\25\6\0\1\75\13\0\1\75\52\0\1\77"+
    "\72\0\1\100\72\0\1\101\66\0\2\102\4\0\5\102"+
    "\4\0\17\102\1\103\6\102\26\0\2\102\4\0\5\102"+
    "\4\0\26\102\26\0\2\102\4\0\5\102\4\0\15\102"+
    "\1\104\1\102\1\105\6\102\26\0\2\102\4\0\5\102"+
    "\4\0\13\102\1\106\1\102\1\107\10\102\26\0\2\102"+
    "\4\0\5\102\4\0\13\102\1\110\12\102\26\0\2\102"+
    "\4\0\5\102\4\0\11\102\1\111\3\102\1\112\10\102"+
    "\26\0\2\102\4\0\5\102\4\0\6\102\1\113\5\102"+
    "\1\114\11\102\26\0\2\102\4\0\5\102\4\0\5\102"+
    "\1\115\7\102\1\116\10\102\26\0\2\102\4\0\5\102"+
    "\4\0\5\102\1\117\20\102\26\0\2\102\4\0\5\102"+
    "\4\0\15\102\1\120\1\102\1\121\6\102\26\0\2\102"+
    "\4\0\5\102\4\0\5\102\1\122\7\102\1\123\10\102"+
    "\26\0\2\102\4\0\5\102\4\0\21\102\1\124\4\102"+
    "\26\0\2\102\4\0\5\102\4\0\10\102\1\125\15\102"+
    "\26\0\2\102\4\0\5\102\4\0\15\102\1\126\10\102"+
    "\26\0\2\102\4\0\5\102\4\0\10\102\1\127\15\102"+
    "\74\0\1\130\10\0\1\131\2\0\1\131\24\0\1\131"+
    "\16\0\1\131\2\0\1\131\1\0\1\131\7\0\15\132"+
    "\1\133\4\132\1\0\50\132\2\134\1\0\1\134\1\0"+
    "\66\134\23\0\2\74\6\0\1\75\13\0\1\75\41\0"+
    "\1\135\1\0\1\135\2\0\2\136\71\0\2\137\4\0"+
    "\3\137\7\0\6\137\45\0\2\140\4\0\5\140\4\0"+
    "\26\140\26\0\2\140\4\0\5\140\4\0\17\140\1\141"+
    "\6\140\26\0\2\140\4\0\5\140\4\0\15\140\1\142"+
    "\10\140\26\0\2\140\4\0\5\140\4\0\5\140\1\143"+
    "\20\140\26\0\2\140\4\0\5\140\4\0\1\140\1\144"+
    "\24\140\26\0\2\140\4\0\5\140\4\0\14\140\1\145"+
    "\11\140\26\0\2\140\4\0\5\140\4\0\20\140\1\146"+
    "\5\140\26\0\2\140\4\0\5\140\4\0\17\140\1\147"+
    "\6\140\26\0\2\140\4\0\5\140\4\0\1\150\20\140"+
    "\1\151\4\140\26\0\2\140\4\0\5\140\4\0\14\140"+
    "\1\152\4\140\1\153\4\140\26\0\2\140\4\0\5\140"+
    "\4\0\15\140\1\154\10\140\26\0\2\140\4\0\5\140"+
    "\4\0\24\140\1\155\1\140\26\0\2\140\4\0\5\140"+
    "\4\0\15\140\1\156\10\140\26\0\2\140\4\0\5\140"+
    "\4\0\11\140\1\157\14\140\26\0\2\140\4\0\5\140"+
    "\4\0\1\140\1\160\17\140\1\161\4\140\26\0\2\140"+
    "\4\0\5\140\4\0\6\140\1\162\17\140\26\0\2\140"+
    "\4\0\5\140\4\0\1\140\1\163\15\140\1\164\6\140"+
    "\26\0\2\140\4\0\5\140\4\0\5\140\1\165\20\140"+
    "\26\0\2\140\4\0\5\140\4\0\11\140\1\166\14\140"+
    "\26\0\2\140\4\0\5\140\4\0\11\140\1\167\14\140"+
    "\3\0\15\132\1\170\55\132\22\0\1\171\50\0\2\134"+
    "\1\171\1\134\1\172\66\134\23\0\2\136\71\0\2\173"+
    "\4\0\5\173\4\0\26\173\26\0\2\173\4\0\5\173"+
    "\4\0\1\173\1\174\24\173\26\0\2\173\4\0\5\173"+
    "\4\0\13\173\1\175\12\173\26\0\2\173\4\0\5\173"+
    "\4\0\1\173\1\176\24\173\26\0\2\173\4\0\5\173"+
    "\4\0\20\173\1\177\5\173\26\0\2\173\4\0\5\173"+
    "\4\0\21\173\1\200\4\173\26\0\2\173\4\0\5\173"+
    "\4\0\5\173\1\201\20\173\26\0\2\173\4\0\5\173"+
    "\4\0\11\173\1\202\6\173\1\203\5\173\26\0\2\173"+
    "\4\0\5\173\4\0\16\173\1\204\7\173\26\0\2\173"+
    "\4\0\5\173\4\0\13\173\1\205\12\173\26\0\2\173"+
    "\4\0\5\173\4\0\14\173\1\206\11\173\26\0\2\173"+
    "\4\0\5\173\4\0\13\173\1\207\12\173\26\0\2\173"+
    "\4\0\5\173\4\0\22\173\1\210\3\173\26\0\2\173"+
    "\4\0\5\173\4\0\21\173\1\211\4\173\26\0\2\173"+
    "\4\0\5\173\4\0\11\173\1\212\14\173\26\0\2\173"+
    "\4\0\5\173\4\0\14\173\1\213\11\173\26\0\2\173"+
    "\4\0\5\173\4\0\4\173\1\214\21\173\26\0\2\173"+
    "\4\0\5\173\4\0\13\173\1\215\12\173\20\0\1\216"+
    "\57\0\1\171\113\0\2\217\4\0\5\217\4\0\26\217"+
    "\26\0\2\217\4\0\5\217\4\0\25\217\1\220\26\0"+
    "\2\217\4\0\5\217\4\0\12\217\1\221\13\217\26\0"+
    "\2\217\4\0\5\217\4\0\20\217\1\222\5\217\26\0"+
    "\2\217\4\0\5\217\4\0\11\217\1\223\14\217\26\0"+
    "\2\217\4\0\5\217\4\0\14\217\1\224\11\217\26\0"+
    "\2\217\4\0\5\217\4\0\21\217\1\225\4\217\26\0"+
    "\2\217\4\0\5\217\4\0\21\217\1\226\4\217\26\0"+
    "\2\217\4\0\5\217\4\0\17\217\1\227\6\217\26\0"+
    "\2\217\4\0\5\217\4\0\11\217\1\230\14\217\26\0"+
    "\2\217\4\0\5\217\4\0\14\217\1\231\11\217\26\0"+
    "\2\217\4\0\5\217\4\0\5\217\1\232\20\217\20\0"+
    "\1\216\4\0\1\171\73\0\2\233\4\0\5\233\4\0"+
    "\26\233\26\0\2\233\4\0\5\233\4\0\14\233\1\234"+
    "\11\233\26\0\2\233\4\0\5\233\4\0\21\233\1\235"+
    "\4\233\26\0\2\233\4\0\5\233\4\0\17\233\1\236"+
    "\6\233\26\0\2\233\4\0\5\233\4\0\14\233\1\237"+
    "\11\233\26\0\2\233\4\0\5\233\4\0\3\233\1\240"+
    "\22\233\26\0\2\233\4\0\5\233\4\0\7\233\1\241"+
    "\16\233\26\0\2\242\4\0\5\242\4\0\26\242\26\0"+
    "\2\242\4\0\5\242\4\0\22\242\1\243\3\242\26\0"+
    "\2\242\4\0\5\242\4\0\11\242\1\244\14\242\26\0"+
    "\2\245\4\0\5\245\4\0\26\245\26\0\2\245\4\0"+
    "\5\245\4\0\5\245\1\246\20\245\26\0\2\245\4\0"+
    "\5\245\4\0\14\245\1\247\11\245\26\0\2\250\4\0"+
    "\5\250\4\0\26\250\26\0\2\250\4\0\5\250\4\0"+
    "\7\250\1\251\16\250\26\0\2\252\4\0\5\252\4\0"+
    "\26\252\26\0\2\253\4\0\5\253\4\0\26\253\26\0"+
    "\2\254\4\0\5\254\4\0\26\254\26\0\2\255\4\0"+
    "\5\255\4\0\26\255\26\0\2\256\4\0\5\256\4\0"+
    "\26\256\26\0\2\257\4\0\5\257\4\0\26\257\26\0"+
    "\2\260\4\0\5\260\4\0\26\260\26\0\2\261\4\0"+
    "\5\261\4\0\26\261\26\0\2\262\4\0\5\262\4\0"+
    "\26\262\26\0\2\263\4\0\5\263\4\0\26\263\26\0"+
    "\2\264\4\0\5\264\4\0\26\264\26\0\2\265\4\0"+
    "\5\265\4\0\26\265\26\0\2\266\4\0\5\266\4\0"+
    "\26\266\26\0\2\267\4\0\5\267\4\0\26\267\26\0"+
    "\2\270\4\0\5\270\4\0\26\270\26\0\2\271\4\0"+
    "\5\271\4\0\26\271\26\0\2\272\4\0\5\272\4\0"+
    "\26\272\26\0\2\273\4\0\5\273\4\0\26\273\26\0"+
    "\2\274\4\0\5\274\4\0\26\274\26\0\2\275\4\0"+
    "\5\275\4\0\26\275\26\0\2\276\4\0\5\276\4\0"+
    "\26\276\26\0\2\277\4\0\5\277\4\0\26\277\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7729];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\1\1\1\11\1\1\2\11\1\1\2\11"+
    "\2\1\1\11\1\1\1\11\3\1\1\11\5\1\3\11"+
    "\15\1\1\11\1\1\3\11\1\1\7\11\2\0\1\11"+
    "\1\1\2\0\3\11\26\1\2\11\4\0\32\1\1\0"+
    "\1\11\24\1\1\0\60\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public int ICV;
    public double RCV;
    public static class Symbol{
        public int tokenType;
        public String text;
        public double valueD;
        public int valueI;
        public static int LET = 0;
        public static int VOID = 1;
        public static int INT = 2;
        public static int REAL = 3;
        public static int BOOL = 4;
        public static int STRING = 5;
        public static int STATIC = 6;
        public static int CLASS = 7;
        public static int FOR = 8;
        public static int ROF = 9;
        public static int LOOP = 10;
        public static int POOL = -1;
        public static int WHILE = 11;
        public static int BREAK = 12;
        public static int CONTINUE = 13;
        public static int IF = 14;
        public static int FI = 15;
        public static int ELSE = 16;
        public static int THEN = 17;
        public static int NEW = 18;
        public static int ARRAY = 19;
        public static int RETURN = 20;
        public static int INSTRING = 21;
        public static int ININT = 22;
        public static int PRINT = 23;
        public static int LEN = 24;
        public static int ADD = 25;
	    public static int MINUS = 26;
        public static int MULT = 27;
        public static int DIV = 28;
	    public static int ADDASSIGN = 29;
        public static int SUBASSIGN = 30;
        public static int MULTASSIGN = 31;
	    public static int DIVASSIGN = 32;
	    public static int INCREASE = 33;
	    public static int DECREASE = 34;
        public static int LESS = 35;
        public static int LESSEQUAL = 36;
        public static int GREATER = 37;
        public static int GREATEREQUAL = 38;
        public static int EQUAL = 39;
        public static int NOTEQUAL = 40;
	    public static int ASSIGN = 41;
        public static int MOD = 42;
        public static int LOGICAND = 43;
        public static int LOGICOR = 44;
        public static int BITWISEAND = 45;
	    public static int BITWISEOR = 46;
        //string literal
        public static int XOR = 47;
	    public static int NOT = 48;
        public static int DOT = 49;
        public static int COMMA = 50;
        public static int SEMICOLON = 51;
        public static int OPENBRACE = 52;
	    public static int CLOSEBRACE = 53;
        public static int OPENPAREN = 54;
	    public static int CLOSEPAREN = 55;
        public static int OPENCURLY = 56;
	    public static int CLOSECURLY = 57;
        public static int ID = 58;
        public static int INTCONST = 59;
        public static int REALCONST = 60;
        public static int STRINGCONST = 61;
        public static int SPECIAL_CHARACTER = 62;
        public static int COMMENT = 63;
        public static int WHITESPACE = 64;
        public static int UNDEFINED = 65;
        public static int TAB = 66;
        public static int ENTER = 67;

        public Symbol(int tokenType, String text){
            this.tokenType = tokenType;
            this.text = text;
        }
        public Symbol(int tokenType, double valueD){
            this.tokenType = tokenType;
            this.valueD = valueD;
        }
        public Symbol(int tokenType, int valueI){
            this.tokenType = tokenType;
            this.valueI = valueI;
        }
    }
    public Symbol symbol(int tokenType){
      System.out.println(yytext());
      return new Symbol(tokenType, yytext());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(Symbol.UNDEFINED);
            }
            // fall through
          case 72: break;
          case 2:
            { return symbol(Symbol.TAB);
            }
            // fall through
          case 73: break;
          case 3:
            { return new Symbol( Symbol.ENTER,  "\n");
            }
            // fall through
          case 74: break;
          case 4:
            { return symbol(Symbol.WHITESPACE);
            }
            // fall through
          case 75: break;
          case 5:
            { return symbol(Symbol.NOT);
            }
            // fall through
          case 76: break;
          case 6:
            { yybegin( STRING ); return symbol(Symbol.STRINGCONST);
            }
            // fall through
          case 77: break;
          case 7:
            { return symbol(Symbol.MOD);
            }
            // fall through
          case 78: break;
          case 8:
            { return symbol(Symbol.BITWISEAND);
            }
            // fall through
          case 79: break;
          case 9:
            { return symbol(Symbol.OPENPAREN);
            }
            // fall through
          case 80: break;
          case 10:
            { return symbol(Symbol.CLOSEPAREN);
            }
            // fall through
          case 81: break;
          case 11:
            { return symbol(Symbol.MULT);
            }
            // fall through
          case 82: break;
          case 12:
            { return symbol(Symbol.ADD);
            }
            // fall through
          case 83: break;
          case 13:
            { return symbol(Symbol.COMMA);
            }
            // fall through
          case 84: break;
          case 14:
            { return symbol(Symbol.MINUS);
            }
            // fall through
          case 85: break;
          case 15:
            { return symbol(Symbol.DOT);
            }
            // fall through
          case 86: break;
          case 16:
            { return symbol(Symbol.DIV);
            }
            // fall through
          case 87: break;
          case 17:
            { return symbol(Symbol.INTCONST);
            }
            // fall through
          case 88: break;
          case 18:
            { return symbol(Symbol.SEMICOLON);
            }
            // fall through
          case 89: break;
          case 19:
            { return symbol(Symbol.LESS);
            }
            // fall through
          case 90: break;
          case 20:
            { return symbol(Symbol.ASSIGN);
            }
            // fall through
          case 91: break;
          case 21:
            { return symbol(Symbol.GREATER);
            }
            // fall through
          case 92: break;
          case 22:
            { return symbol(Symbol.ID);
            }
            // fall through
          case 93: break;
          case 23:
            { return symbol(Symbol.OPENBRACE);
            }
            // fall through
          case 94: break;
          case 24:
            { return symbol(Symbol.CLOSEBRACE);
            }
            // fall through
          case 95: break;
          case 25:
            { return symbol(Symbol.XOR);
            }
            // fall through
          case 96: break;
          case 26:
            { return symbol(Symbol.OPENCURLY);
            }
            // fall through
          case 97: break;
          case 27:
            { return symbol(Symbol.BITWISEOR);
            }
            // fall through
          case 98: break;
          case 28:
            { return symbol(Symbol.CLOSECURLY);
            }
            // fall through
          case 99: break;
          case 29:
            { return new Symbol( Symbol.STRINGCONST, yytext());
            }
            // fall through
          case 100: break;
          case 30:
            { yybegin( YYINITIAL ); return new Symbol(Symbol.STRINGCONST, yytext());
            }
            // fall through
          case 101: break;
          case 31:
            { return symbol(Symbol.NOTEQUAL);
            }
            // fall through
          case 102: break;
          case 32:
            { return symbol(Symbol.LOGICAND);
            }
            // fall through
          case 103: break;
          case 33:
            { return symbol(Symbol.MULTASSIGN);
            }
            // fall through
          case 104: break;
          case 34:
            { return symbol(Symbol.INCREASE);
            }
            // fall through
          case 105: break;
          case 35:
            { return symbol(Symbol.ADDASSIGN);
            }
            // fall through
          case 106: break;
          case 36:
            { return symbol(Symbol.DECREASE);
            }
            // fall through
          case 107: break;
          case 37:
            { return symbol(Symbol.SUBASSIGN);
            }
            // fall through
          case 108: break;
          case 38:
            { return symbol(Symbol.DIVASSIGN);
            }
            // fall through
          case 109: break;
          case 39:
            { return symbol(Symbol.REALCONST);
            }
            // fall through
          case 110: break;
          case 40:
            { return symbol(Symbol.LESSEQUAL);
            }
            // fall through
          case 111: break;
          case 41:
            { return symbol(Symbol.EQUAL);
            }
            // fall through
          case 112: break;
          case 42:
            { return symbol(Symbol.GREATEREQUAL);
            }
            // fall through
          case 113: break;
          case 43:
            { return symbol(Symbol.FI);
            }
            // fall through
          case 114: break;
          case 44:
            { return symbol(Symbol.IF);
            }
            // fall through
          case 115: break;
          case 45:
            { return symbol(Symbol.LOGICOR);
            }
            // fall through
          case 116: break;
          case 46:
            { return new Symbol( Symbol.SPECIAL_CHARACTER, yytext());
            }
            // fall through
          case 117: break;
          case 47:
            { return symbol(Symbol.FOR);
            }
            // fall through
          case 118: break;
          case 48:
            { return symbol(Symbol.INT);
            }
            // fall through
          case 119: break;
          case 49:
            { return symbol(Symbol.LEN);
            }
            // fall through
          case 120: break;
          case 50:
            { return symbol(Symbol.LET);
            }
            // fall through
          case 121: break;
          case 51:
            { return symbol(Symbol.NEW);
            }
            // fall through
          case 122: break;
          case 52:
            { return symbol(Symbol.ROF);
            }
            // fall through
          case 123: break;
          case 53:
            { return symbol(Symbol.COMMENT);
            }
            // fall through
          case 124: break;
          case 54:
            { return symbol(Symbol.BOOL);
            }
            // fall through
          case 125: break;
          case 55:
            { return symbol(Symbol.ELSE);
            }
            // fall through
          case 126: break;
          case 56:
            { return symbol(Symbol.LOOP);
            }
            // fall through
          case 127: break;
          case 57:
            { return symbol(Symbol.POOL);
            }
            // fall through
          case 128: break;
          case 58:
            { return symbol(Symbol.REAL);
            }
            // fall through
          case 129: break;
          case 59:
            { return symbol(Symbol.THEN);
            }
            // fall through
          case 130: break;
          case 60:
            { return symbol(Symbol.VOID);
            }
            // fall through
          case 131: break;
          case 61:
            { return symbol(Symbol.ARRAY);
            }
            // fall through
          case 132: break;
          case 62:
            { return symbol(Symbol.BREAK);
            }
            // fall through
          case 133: break;
          case 63:
            { return symbol(Symbol.CLASS);
            }
            // fall through
          case 134: break;
          case 64:
            { return symbol(Symbol.PRINT);
            }
            // fall through
          case 135: break;
          case 65:
            { return symbol(Symbol.WHILE);
            }
            // fall through
          case 136: break;
          case 66:
            { return symbol(Symbol.ININT);
            }
            // fall through
          case 137: break;
          case 67:
            { return symbol(Symbol.RETURN);
            }
            // fall through
          case 138: break;
          case 68:
            { return symbol(Symbol.STATIC);
            }
            // fall through
          case 139: break;
          case 69:
            { return symbol(Symbol.STRING);
            }
            // fall through
          case 140: break;
          case 70:
            { return symbol(Symbol.CONTINUE);
            }
            // fall through
          case 141: break;
          case 71:
            { return symbol(Symbol.INSTRING);
            }
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
